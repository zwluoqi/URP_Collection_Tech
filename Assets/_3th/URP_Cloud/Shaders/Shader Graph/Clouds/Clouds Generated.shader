Shader "Clouds Generated Code"
{
    Properties
    {
        Vector4_D3B3E943("Rotate Projection", Vector) = (1,0,0,0)
Vector1_338070E0("Noise Scale ", Float) = 10
Vector1_2B98EB7D("Speed ", Float) = 0.1
Vector1_7E1AD4D6("Vertex Offset ", Float) = 1
Vector4_DA068D89("Remap Controller", Vector) = (0,1,-1,1)
Color_AD16EE5E("Color Peak", Color) = (1,1,1,0)
Color_6D35BD30("Color Valley", Color) = (0,0,0,0)
Vector1_FEB1FFD5("Normal Edge 1 ", Float) = 0
Vector1_8038C85("Normal Edge 2 ", Float) = 1
Vector1_D2AA808A("Noise Power Strength ", Float) = 2
Vector1_48A8130("Base Scale ", Float) = 5
Vector1_9A6C69D3("Base Speed ", Float) = 0.2
Vector1_908E92C3("Base Strength ", Float) = 2
Vector1_EF0B7AAC("Emission Strength ", Float) = 1
Vector1_A409D8BE("Curvature Radius ", Float) = 200
Vector1_58F7CCC1("Fresnal Power ", Float) = 1
Vector1_3BED982A("Fresnal Opacity ", Float) = 1
Vector1_A6F9214A("Transperncy Range ", Float) = 100

    }
    SubShader
    {
        Tags
        {
            "RenderPipeline"="LightweightPipeline"
            "RenderType"="Transparent"
            "Queue"="Transparent+0"
        }
        Pass
        {
            // Material options generated by graph

            Blend SrcAlpha OneMinusSrcAlpha, One OneMinusSrcAlpha

            Cull Off

            ZTest LEqual

            ZWrite Off

            HLSLPROGRAM
            // Required to compile gles 2.0 with standard srp library
            #pragma prefer_hlslcc gles
            #pragma exclude_renderers d3d11_9x
            #pragma target 2.0

            // -------------------------------------
            // Lightweight Pipeline keywords
            #pragma shader_feature _SAMPLE_GI

            // -------------------------------------
            // Unity defined keywords
            #pragma multi_compile _ DIRLIGHTMAP_COMBINED
            #pragma multi_compile _ LIGHTMAP_ON
            #pragma multi_compile_fog

            //--------------------------------------
            // GPU Instancing
            #pragma multi_compile_instancing
            
            #pragma vertex vert
            #pragma fragment frag

            // Defines generated by graph
            #define REQUIRE_DEPTH_TEXTURE

            // Lighting include is needed because of GI
            #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
            #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Lighting.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
            #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/ShaderGraphFunctions.hlsl"
            #include "Packages/com.unity.render-pipelines.universal/Shaders/UnlitInput.hlsl"

            CBUFFER_START(UnityPerMaterial)
            float4 Vector4_D3B3E943;
            float Vector1_338070E0;
            float Vector1_2B98EB7D;
            float Vector1_7E1AD4D6;
            float4 Vector4_DA068D89;
            float4 Color_AD16EE5E;
            float4 Color_6D35BD30;
            float Vector1_FEB1FFD5;
            float Vector1_8038C85;
            float Vector1_D2AA808A;
            float Vector1_48A8130;
            float Vector1_9A6C69D3;
            float Vector1_908E92C3;
            float Vector1_EF0B7AAC;
            float Vector1_A409D8BE;
            float Vector1_58F7CCC1;
            float Vector1_3BED982A;
            float Vector1_A6F9214A;
            CBUFFER_END

            struct VertexDescriptionInputs
            {
                float3 ObjectSpaceNormal;
                float3 WorldSpaceNormal;
                float3 ObjectSpacePosition;
                float3 WorldSpacePosition;
                float3 TimeParameters;
            };

            struct SurfaceDescriptionInputs
            {
                float3 WorldSpaceNormal;
                float3 WorldSpaceViewDirection;
                float3 WorldSpacePosition;
                float4 ScreenPosition;
                float3 TimeParameters;
            };


            void Unity_Distance_float3(float3 A, float3 B, out float Out)
            {
                Out = distance(A, B);
            }

            void Unity_Divide_float(float A, float B, out float Out)
            {
                Out = A / B;
            }

            void Unity_Power_float(float A, float B, out float Out)
            {
                Out = pow(A, B);
            }

            void Unity_Multiply_float (float3 A, float3 B, out float3 Out)
            {
                Out = A * B;
            }

            void Unity_Rotate_About_Axis_Degrees_float(float3 In, float3 Axis, float Rotation, out float3 Out)
            {
                Rotation = radians(Rotation);

                float s = sin(Rotation);
                float c = cos(Rotation);
                float one_minus_c = 1.0 - c;
                
                Axis = normalize(Axis);

                float3x3 rot_mat = { one_minus_c * Axis.x * Axis.x + c,            one_minus_c * Axis.x * Axis.y - Axis.z * s,     one_minus_c * Axis.z * Axis.x + Axis.y * s,
                                          one_minus_c * Axis.x * Axis.y + Axis.z * s,   one_minus_c * Axis.y * Axis.y + c,              one_minus_c * Axis.y * Axis.z - Axis.x * s,
                                          one_minus_c * Axis.z * Axis.x - Axis.y * s,   one_minus_c * Axis.y * Axis.z + Axis.x * s,     one_minus_c * Axis.z * Axis.z + c
                                        };

                Out = mul(rot_mat,  In);
            }

            void Unity_Multiply_float (float A, float B, out float Out)
            {
                Out = A * B;
            }

            void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
            {
                Out = UV * Tiling + Offset;
            }


        float2 Unity_GradientNoise_Dir_float(float2 p)
        {
            // Permutation and hashing used in webgl-nosie goo.gl/pX7HtC
            p = p % 289;
            float x = (34 * p.x + 1) * p.x % 289 + p.y;
            x = (34 * x + 1) * x % 289;
            x = frac(x / 41) * 2 - 1;
            return normalize(float2(x - floor(x + 0.5), abs(x) - 0.5));
        }

            void Unity_GradientNoise_float(float2 UV, float Scale, out float Out)
            { 
                float2 p = UV * Scale;
                float2 ip = floor(p);
                float2 fp = frac(p);
                float d00 = dot(Unity_GradientNoise_Dir_float(ip), fp);
                float d01 = dot(Unity_GradientNoise_Dir_float(ip + float2(0, 1)), fp - float2(0, 1));
                float d10 = dot(Unity_GradientNoise_Dir_float(ip + float2(1, 0)), fp - float2(1, 0));
                float d11 = dot(Unity_GradientNoise_Dir_float(ip + float2(1, 1)), fp - float2(1, 1));
                fp = fp * fp * fp * (fp * (fp * 6 - 15) + 10);
                Out = lerp(lerp(d00, d01, fp.y), lerp(d10, d11, fp.y), fp.x) + 0.5;
            }

            void Unity_Add_float(float A, float B, out float Out)
            {
                Out = A + B;
            }

            void Unity_Saturate_float(float In, out float Out)
            {
                Out = saturate(In);
            }

            void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
            {
                Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
            }

            void Unity_Absolute_float(float In, out float Out)
            {
                Out = abs(In);
            }

            void Unity_Smoothstep_float(float Edge1, float Edge2, float In, out float Out)
            {
                Out = smoothstep(Edge1, Edge2, In);
            }

            void Unity_Add_float3(float3 A, float3 B, out float3 Out)
            {
                Out = A + B;
            }

            void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
            {
                Out = lerp(A, B, T);
            }

            void Unity_FresnelEffect_float(float3 Normal, float3 ViewDir, float Power, out float Out)
            {
                Out = pow((1.0 - saturate(dot(normalize(Normal), normalize(ViewDir)))), Power);
            }

            void Unity_Add_float4(float4 A, float4 B, out float4 Out)
            {
                Out = A + B;
            }

            void Unity_SceneDepth_Eye_float(float4 UV, out float Out)
            {
                Out = LinearEyeDepth(SHADERGRAPH_SAMPLE_SCENE_DEPTH(UV.xy), _ZBufferParams);
            }

            void Unity_Subtract_float(float A, float B, out float Out)
            {
                Out = A - B;
            }

            struct VertexDescription
            {
                float3 Position;
            };

            VertexDescription PopulateVertexData(VertexDescriptionInputs IN)
            {
                VertexDescription description = (VertexDescription)0;
                float _Distance_68E28C5B_Out_2;
                Unity_Distance_float3(SHADERGRAPH_OBJECT_POSITION, IN.WorldSpacePosition, _Distance_68E28C5B_Out_2);
                float _Property_3DA35769_Out_0 = Vector1_A409D8BE;
                float _Divide_EB95936B_Out_2;
                Unity_Divide_float(_Distance_68E28C5B_Out_2, _Property_3DA35769_Out_0, _Divide_EB95936B_Out_2);
                float _Power_43005E91_Out_2;
                Unity_Power_float(_Divide_EB95936B_Out_2, 3, _Power_43005E91_Out_2);
                float3 _Multiply_98A26295_Out_2;
                Unity_Multiply_float(IN.WorldSpaceNormal, (_Power_43005E91_Out_2.xxx), _Multiply_98A26295_Out_2);
                float _Property_735AA8B6_Out_0 = Vector1_FEB1FFD5;
                float _Property_9F4CC1F1_Out_0 = Vector1_8038C85;
                float4 _Property_4EA33CC2_Out_0 = Vector4_D3B3E943;
                float _Split_CAEEE4BB_R_1 = _Property_4EA33CC2_Out_0[0];
                float _Split_CAEEE4BB_G_2 = _Property_4EA33CC2_Out_0[1];
                float _Split_CAEEE4BB_B_3 = _Property_4EA33CC2_Out_0[2];
                float _Split_CAEEE4BB_A_4 = _Property_4EA33CC2_Out_0[3];
                float3 _RotateAboutAxis_6FFDD156_Out_3;
                Unity_Rotate_About_Axis_Degrees_float(IN.WorldSpacePosition, (_Property_4EA33CC2_Out_0.xyz), _Split_CAEEE4BB_A_4, _RotateAboutAxis_6FFDD156_Out_3);
                float _Property_F34A3533_Out_0 = Vector1_2B98EB7D;
                float _Multiply_852D3C8E_Out_2;
                Unity_Multiply_float(_Property_F34A3533_Out_0, IN.TimeParameters.x, _Multiply_852D3C8E_Out_2);
                float2 _TilingAndOffset_B9174754_Out_3;
                Unity_TilingAndOffset_float((_RotateAboutAxis_6FFDD156_Out_3.xy), float2 (1, 1), (_Multiply_852D3C8E_Out_2.xx), _TilingAndOffset_B9174754_Out_3);
                float _Property_56518450_Out_0 = Vector1_338070E0;
                float _GradientNoise_40BEF6E1_Out_2;
                Unity_GradientNoise_float(_TilingAndOffset_B9174754_Out_3, _Property_56518450_Out_0, _GradientNoise_40BEF6E1_Out_2);
                float2 _TilingAndOffset_695BCCA6_Out_3;
                Unity_TilingAndOffset_float((_RotateAboutAxis_6FFDD156_Out_3.xy), float2 (1, 1), float2 (0, 0), _TilingAndOffset_695BCCA6_Out_3);
                float _GradientNoise_AD2BA186_Out_2;
                Unity_GradientNoise_float(_TilingAndOffset_695BCCA6_Out_3, _Property_56518450_Out_0, _GradientNoise_AD2BA186_Out_2);
                float _Add_BB4C6F11_Out_2;
                Unity_Add_float(_GradientNoise_40BEF6E1_Out_2, _GradientNoise_AD2BA186_Out_2, _Add_BB4C6F11_Out_2);
                float _Divide_1B4C5A51_Out_2;
                Unity_Divide_float(_Add_BB4C6F11_Out_2, 2, _Divide_1B4C5A51_Out_2);
                float _Saturate_C5D0BE0A_Out_1;
                Unity_Saturate_float(_Divide_1B4C5A51_Out_2, _Saturate_C5D0BE0A_Out_1);
                float _Property_A653A8AC_Out_0 = Vector1_D2AA808A;
                float _Power_838A838_Out_2;
                Unity_Power_float(_Saturate_C5D0BE0A_Out_1, _Property_A653A8AC_Out_0, _Power_838A838_Out_2);
                float4 _Property_963E23E9_Out_0 = Vector4_DA068D89;
                float _Split_30AF1BF4_R_1 = _Property_963E23E9_Out_0[0];
                float _Split_30AF1BF4_G_2 = _Property_963E23E9_Out_0[1];
                float _Split_30AF1BF4_B_3 = _Property_963E23E9_Out_0[2];
                float _Split_30AF1BF4_A_4 = _Property_963E23E9_Out_0[3];
                float2 _Vector2_4B89478C_Out_0 = float2(_Split_30AF1BF4_R_1, _Split_30AF1BF4_G_2);
                float2 _Vector2_491DD62B_Out_0 = float2(_Split_30AF1BF4_B_3, _Split_30AF1BF4_A_4);
                float _Remap_E4CCEAE4_Out_3;
                Unity_Remap_float(_Power_838A838_Out_2, _Vector2_4B89478C_Out_0, _Vector2_491DD62B_Out_0, _Remap_E4CCEAE4_Out_3);
                float _Absolute_8D0D3BAC_Out_1;
                Unity_Absolute_float(_Remap_E4CCEAE4_Out_3, _Absolute_8D0D3BAC_Out_1);
                float _Smoothstep_7A96786D_Out_3;
                Unity_Smoothstep_float(_Property_735AA8B6_Out_0, _Property_9F4CC1F1_Out_0, _Absolute_8D0D3BAC_Out_1, _Smoothstep_7A96786D_Out_3);
                float _Property_AA6E7E52_Out_0 = Vector1_9A6C69D3;
                float _Multiply_8331939D_Out_2;
                Unity_Multiply_float(IN.TimeParameters.x, _Property_AA6E7E52_Out_0, _Multiply_8331939D_Out_2);
                float2 _TilingAndOffset_2DC3C864_Out_3;
                Unity_TilingAndOffset_float((_RotateAboutAxis_6FFDD156_Out_3.xy), float2 (1, 1), (_Multiply_8331939D_Out_2.xx), _TilingAndOffset_2DC3C864_Out_3);
                float _Property_69C7CA9F_Out_0 = Vector1_48A8130;
                float _GradientNoise_1082A80D_Out_2;
                Unity_GradientNoise_float(_TilingAndOffset_2DC3C864_Out_3, _Property_69C7CA9F_Out_0, _GradientNoise_1082A80D_Out_2);
                float _Property_CD233709_Out_0 = Vector1_908E92C3;
                float _Multiply_E32081B6_Out_2;
                Unity_Multiply_float(_GradientNoise_1082A80D_Out_2, _Property_CD233709_Out_0, _Multiply_E32081B6_Out_2);
                float _Add_B6C19B6E_Out_2;
                Unity_Add_float(_Smoothstep_7A96786D_Out_3, _Multiply_E32081B6_Out_2, _Add_B6C19B6E_Out_2);
                float _Add_D4BF8438_Out_2;
                Unity_Add_float(1, _Property_CD233709_Out_0, _Add_D4BF8438_Out_2);
                float _Divide_DC78A4BB_Out_2;
                Unity_Divide_float(_Add_B6C19B6E_Out_2, _Add_D4BF8438_Out_2, _Divide_DC78A4BB_Out_2);
                float3 _Multiply_F2AD6F23_Out_2;
                Unity_Multiply_float(IN.ObjectSpaceNormal, (_Divide_DC78A4BB_Out_2.xxx), _Multiply_F2AD6F23_Out_2);
                float _Property_336E3F53_Out_0 = Vector1_7E1AD4D6;
                float3 _Multiply_FB13E5B_Out_2;
                Unity_Multiply_float(_Multiply_F2AD6F23_Out_2, (_Property_336E3F53_Out_0.xxx), _Multiply_FB13E5B_Out_2);
                float3 _Add_68F9009_Out_2;
                Unity_Add_float3(IN.ObjectSpacePosition, _Multiply_FB13E5B_Out_2, _Add_68F9009_Out_2);
                float3 _Add_AE95D909_Out_2;
                Unity_Add_float3(_Multiply_98A26295_Out_2, _Add_68F9009_Out_2, _Add_AE95D909_Out_2);
                description.Position = _Add_AE95D909_Out_2;
                return description;
            }

            struct SurfaceDescription
            {
                float3 Color;
                float Alpha;
                float AlphaClipThreshold;
            };

            SurfaceDescription PopulateSurfaceData(SurfaceDescriptionInputs IN)
            {
                SurfaceDescription surface = (SurfaceDescription)0;
                float4 _Property_A98A2F1F_Out_0 = Color_6D35BD30;
                float4 _Property_2D8D03AB_Out_0 = Color_AD16EE5E;
                float _Property_735AA8B6_Out_0 = Vector1_FEB1FFD5;
                float _Property_9F4CC1F1_Out_0 = Vector1_8038C85;
                float4 _Property_4EA33CC2_Out_0 = Vector4_D3B3E943;
                float _Split_CAEEE4BB_R_1 = _Property_4EA33CC2_Out_0[0];
                float _Split_CAEEE4BB_G_2 = _Property_4EA33CC2_Out_0[1];
                float _Split_CAEEE4BB_B_3 = _Property_4EA33CC2_Out_0[2];
                float _Split_CAEEE4BB_A_4 = _Property_4EA33CC2_Out_0[3];
                float3 _RotateAboutAxis_6FFDD156_Out_3;
                Unity_Rotate_About_Axis_Degrees_float(IN.WorldSpacePosition, (_Property_4EA33CC2_Out_0.xyz), _Split_CAEEE4BB_A_4, _RotateAboutAxis_6FFDD156_Out_3);
                float _Property_F34A3533_Out_0 = Vector1_2B98EB7D;
                float _Multiply_852D3C8E_Out_2;
                Unity_Multiply_float(_Property_F34A3533_Out_0, IN.TimeParameters.x, _Multiply_852D3C8E_Out_2);
                float2 _TilingAndOffset_B9174754_Out_3;
                Unity_TilingAndOffset_float((_RotateAboutAxis_6FFDD156_Out_3.xy), float2 (1, 1), (_Multiply_852D3C8E_Out_2.xx), _TilingAndOffset_B9174754_Out_3);
                float _Property_56518450_Out_0 = Vector1_338070E0;
                float _GradientNoise_40BEF6E1_Out_2;
                Unity_GradientNoise_float(_TilingAndOffset_B9174754_Out_3, _Property_56518450_Out_0, _GradientNoise_40BEF6E1_Out_2);
                float2 _TilingAndOffset_695BCCA6_Out_3;
                Unity_TilingAndOffset_float((_RotateAboutAxis_6FFDD156_Out_3.xy), float2 (1, 1), float2 (0, 0), _TilingAndOffset_695BCCA6_Out_3);
                float _GradientNoise_AD2BA186_Out_2;
                Unity_GradientNoise_float(_TilingAndOffset_695BCCA6_Out_3, _Property_56518450_Out_0, _GradientNoise_AD2BA186_Out_2);
                float _Add_BB4C6F11_Out_2;
                Unity_Add_float(_GradientNoise_40BEF6E1_Out_2, _GradientNoise_AD2BA186_Out_2, _Add_BB4C6F11_Out_2);
                float _Divide_1B4C5A51_Out_2;
                Unity_Divide_float(_Add_BB4C6F11_Out_2, 2, _Divide_1B4C5A51_Out_2);
                float _Saturate_C5D0BE0A_Out_1;
                Unity_Saturate_float(_Divide_1B4C5A51_Out_2, _Saturate_C5D0BE0A_Out_1);
                float _Property_A653A8AC_Out_0 = Vector1_D2AA808A;
                float _Power_838A838_Out_2;
                Unity_Power_float(_Saturate_C5D0BE0A_Out_1, _Property_A653A8AC_Out_0, _Power_838A838_Out_2);
                float4 _Property_963E23E9_Out_0 = Vector4_DA068D89;
                float _Split_30AF1BF4_R_1 = _Property_963E23E9_Out_0[0];
                float _Split_30AF1BF4_G_2 = _Property_963E23E9_Out_0[1];
                float _Split_30AF1BF4_B_3 = _Property_963E23E9_Out_0[2];
                float _Split_30AF1BF4_A_4 = _Property_963E23E9_Out_0[3];
                float2 _Vector2_4B89478C_Out_0 = float2(_Split_30AF1BF4_R_1, _Split_30AF1BF4_G_2);
                float2 _Vector2_491DD62B_Out_0 = float2(_Split_30AF1BF4_B_3, _Split_30AF1BF4_A_4);
                float _Remap_E4CCEAE4_Out_3;
                Unity_Remap_float(_Power_838A838_Out_2, _Vector2_4B89478C_Out_0, _Vector2_491DD62B_Out_0, _Remap_E4CCEAE4_Out_3);
                float _Absolute_8D0D3BAC_Out_1;
                Unity_Absolute_float(_Remap_E4CCEAE4_Out_3, _Absolute_8D0D3BAC_Out_1);
                float _Smoothstep_7A96786D_Out_3;
                Unity_Smoothstep_float(_Property_735AA8B6_Out_0, _Property_9F4CC1F1_Out_0, _Absolute_8D0D3BAC_Out_1, _Smoothstep_7A96786D_Out_3);
                float _Property_AA6E7E52_Out_0 = Vector1_9A6C69D3;
                float _Multiply_8331939D_Out_2;
                Unity_Multiply_float(IN.TimeParameters.x, _Property_AA6E7E52_Out_0, _Multiply_8331939D_Out_2);
                float2 _TilingAndOffset_2DC3C864_Out_3;
                Unity_TilingAndOffset_float((_RotateAboutAxis_6FFDD156_Out_3.xy), float2 (1, 1), (_Multiply_8331939D_Out_2.xx), _TilingAndOffset_2DC3C864_Out_3);
                float _Property_69C7CA9F_Out_0 = Vector1_48A8130;
                float _GradientNoise_1082A80D_Out_2;
                Unity_GradientNoise_float(_TilingAndOffset_2DC3C864_Out_3, _Property_69C7CA9F_Out_0, _GradientNoise_1082A80D_Out_2);
                float _Property_CD233709_Out_0 = Vector1_908E92C3;
                float _Multiply_E32081B6_Out_2;
                Unity_Multiply_float(_GradientNoise_1082A80D_Out_2, _Property_CD233709_Out_0, _Multiply_E32081B6_Out_2);
                float _Add_B6C19B6E_Out_2;
                Unity_Add_float(_Smoothstep_7A96786D_Out_3, _Multiply_E32081B6_Out_2, _Add_B6C19B6E_Out_2);
                float _Add_D4BF8438_Out_2;
                Unity_Add_float(1, _Property_CD233709_Out_0, _Add_D4BF8438_Out_2);
                float _Divide_DC78A4BB_Out_2;
                Unity_Divide_float(_Add_B6C19B6E_Out_2, _Add_D4BF8438_Out_2, _Divide_DC78A4BB_Out_2);
                float4 _Lerp_2C2A2BD7_Out_3;
                Unity_Lerp_float4(_Property_A98A2F1F_Out_0, _Property_2D8D03AB_Out_0, (_Divide_DC78A4BB_Out_2.xxxx), _Lerp_2C2A2BD7_Out_3);
                float _Property_803CD4F1_Out_0 = Vector1_58F7CCC1;
                float _FresnelEffect_C4128D58_Out_3;
                Unity_FresnelEffect_float(IN.WorldSpaceNormal, IN.WorldSpaceViewDirection, _Property_803CD4F1_Out_0, _FresnelEffect_C4128D58_Out_3);
                float _Multiply_B50C6A_Out_2;
                Unity_Multiply_float(_Divide_DC78A4BB_Out_2, _FresnelEffect_C4128D58_Out_3, _Multiply_B50C6A_Out_2);
                float _Property_87DEA07E_Out_0 = Vector1_3BED982A;
                float _Multiply_23AADD20_Out_2;
                Unity_Multiply_float(_Multiply_B50C6A_Out_2, _Property_87DEA07E_Out_0, _Multiply_23AADD20_Out_2);
                float4 _Add_C92EE283_Out_2;
                Unity_Add_float4(_Lerp_2C2A2BD7_Out_3, (_Multiply_23AADD20_Out_2.xxxx), _Add_C92EE283_Out_2);
                float _SceneDepth_7575CC21_Out_1;//0.1
                Unity_SceneDepth_Eye_float(float4(IN.ScreenPosition.xy / IN.ScreenPosition.w, 0, 0), _SceneDepth_7575CC21_Out_1);
                float4 _ScreenPosition_54081CC1_Out_0 = IN.ScreenPosition;
                float _Split_7349907E_R_1 = _ScreenPosition_54081CC1_Out_0[0];
                float _Split_7349907E_G_2 = _ScreenPosition_54081CC1_Out_0[1];
                float _Split_7349907E_B_3 = _ScreenPosition_54081CC1_Out_0[2];
                float _Split_7349907E_A_4 = _ScreenPosition_54081CC1_Out_0[3];//长度,也就是顶点深度值
                float _Subtract_1A5C75A2_Out_2;//0.08
                Unity_Subtract_float(_Split_7349907E_A_4, 1, _Subtract_1A5C75A2_Out_2);
                float _Subtract_A2E88426_Out_2;
                Unity_Subtract_float(_SceneDepth_7575CC21_Out_1, _Subtract_1A5C75A2_Out_2, _Subtract_A2E88426_Out_2);
                float _Property_FABD1F4F_Out_0 = Vector1_A6F9214A;
                float _Divide_FDCC3C42_Out_2;
                Unity_Divide_float(_Subtract_A2E88426_Out_2, _Property_FABD1F4F_Out_0, _Divide_FDCC3C42_Out_2);
                float _Saturate_58B9B869_Out_1;
                Unity_Saturate_float(_Divide_FDCC3C42_Out_2, _Saturate_58B9B869_Out_1);
                surface.Color = (_Add_C92EE283_Out_2.xyz);
                surface.Alpha = _Saturate_58B9B869_Out_1;
                surface.AlphaClipThreshold = 0.5;
                return surface;
            }

            struct GraphVertexInput
            {
                float4 vertex : POSITION;
                float3 normal : NORMAL;
                float4 tangent : TANGENT;
                float4 texcoord1 : TEXCOORD1;
                UNITY_VERTEX_INPUT_INSTANCE_ID
            };


            struct GraphVertexOutput
            {
                float4 position : POSITION;

                // Interpolators defined by graph
                float3 WorldSpacePosition : TEXCOORD3;
                float3 WorldSpaceNormal : TEXCOORD4;
                float3 WorldSpaceTangent : TEXCOORD5;
                float3 WorldSpaceBiTangent : TEXCOORD6;
                float3 WorldSpaceViewDirection : TEXCOORD7;
                float4 ScreenPosition : TEXCOORD8;
                half4 uv1 : TEXCOORD9;

                UNITY_VERTEX_INPUT_INSTANCE_ID
                UNITY_VERTEX_OUTPUT_STEREO
            };

            GraphVertexOutput vert (GraphVertexInput v)
            {
                GraphVertexOutput o = (GraphVertexOutput)0;
                UNITY_SETUP_INSTANCE_ID(v);
                UNITY_TRANSFER_INSTANCE_ID(v, o);
                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

                // Vertex transformations performed by graph
                float3 WorldSpacePosition = mul(UNITY_MATRIX_M,v.vertex).xyz;
                float3 WorldSpaceNormal = normalize(mul(v.normal,(float3x3)UNITY_MATRIX_I_M));
                float3 WorldSpaceTangent = normalize(mul((float3x3)UNITY_MATRIX_M,v.tangent.xyz));
                float3 WorldSpaceBiTangent = cross(WorldSpaceNormal, WorldSpaceTangent.xyz) * v.tangent.w;
                float3 WorldSpaceViewDirection = _WorldSpaceCameraPos.xyz - mul(GetObjectToWorldMatrix(), float4(v.vertex.xyz, 1.0)).xyz;
                float4 ScreenPosition = ComputeScreenPos(mul(GetWorldToHClipMatrix(), mul(GetObjectToWorldMatrix(), v.vertex)), _ProjectionParams.x);
                float4 uv1 = v.texcoord1;
                float3 ObjectSpaceNormal = mul(WorldSpaceNormal,(float3x3)UNITY_MATRIX_M).xyz;
                float3 ObjectSpacePosition = mul(UNITY_MATRIX_I_M,float4(WorldSpacePosition,1.0)).xyz;

                VertexDescriptionInputs vdi = (VertexDescriptionInputs)0;

                // Vertex description inputs defined by graph
                vdi.ObjectSpaceNormal = ObjectSpaceNormal;
                vdi.WorldSpaceNormal = WorldSpaceNormal;
                vdi.ObjectSpacePosition = ObjectSpacePosition;
                vdi.WorldSpacePosition = WorldSpacePosition;
                vdi.TimeParameters = _TimeParameters.xyz;

                VertexDescription vd = PopulateVertexData(vdi);
                v.vertex.xyz = vd.Position;

                o.position = TransformObjectToHClip(v.vertex.xyz);
                // Vertex shader outputs defined by graph
                o.WorldSpacePosition = WorldSpacePosition;
                o.WorldSpaceNormal = WorldSpaceNormal;
                o.WorldSpaceTangent = WorldSpaceTangent;
                o.WorldSpaceBiTangent = WorldSpaceBiTangent;
                o.WorldSpaceViewDirection = WorldSpaceViewDirection;
                o.ScreenPosition = ScreenPosition;
                o.uv1 = uv1;

                return o;
            }

            half4 frag (GraphVertexOutput IN ) : SV_Target
            {
                UNITY_SETUP_INSTANCE_ID(IN);
        		UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);

                // Pixel transformations performed by graph
                float3 WorldSpacePosition = IN.WorldSpacePosition;
                float3 WorldSpaceNormal = IN.WorldSpaceNormal;
                float3 WorldSpaceTangent = IN.WorldSpaceTangent;
                float3 WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
                float3 WorldSpaceViewDirection = IN.WorldSpaceViewDirection;
                float4 ScreenPosition = IN.ScreenPosition;
                float4 uv1 = IN.uv1;

                
                SurfaceDescriptionInputs surfaceInput = (SurfaceDescriptionInputs)0;
                // Surface description inputs defined by graph
                surfaceInput.WorldSpaceNormal = WorldSpaceNormal;
                surfaceInput.WorldSpaceViewDirection = WorldSpaceViewDirection;
                surfaceInput.WorldSpacePosition = WorldSpacePosition;
                surfaceInput.ScreenPosition = ScreenPosition;
                surfaceInput.TimeParameters = _TimeParameters.xyz;


                SurfaceDescription surf = PopulateSurfaceData(surfaceInput);
                float3 Color = float3(0.5, 0.5, 0.5);
                float Alpha = 1;
                float AlphaClipThreshold = 0;
                // Surface description remap performed by graph
                Color = surf.Color;
                Alpha = surf.Alpha;
                AlphaClipThreshold = surf.AlphaClipThreshold;

                
         #if _AlphaClip
                clip(Alpha - AlphaClipThreshold);
        #endif
                return half4(Color, Alpha);
            }
            ENDHLSL
        }
        Pass
        {
            Name "ShadowCaster"
            Tags{"LightMode" = "ShadowCaster"}

            ZWrite On ZTest LEqual

            // Material options generated by graph
            Cull Off

            HLSLPROGRAM
            // Required to compile gles 2.0 with standard srp library
            #pragma prefer_hlslcc gles
            #pragma exclude_renderers d3d11_9x
            #pragma target 2.0

            //--------------------------------------
            // GPU Instancing
            #pragma multi_compile_instancing

            #pragma vertex ShadowPassVertex
            #pragma fragment ShadowPassFragment

            // Defines generated by graph
            #define REQUIRE_DEPTH_TEXTURE

            #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
            #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Lighting.hlsl"
            #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/ShaderGraphFunctions.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"

            CBUFFER_START(UnityPerMaterial)
            float4 Vector4_D3B3E943;
            float Vector1_338070E0;
            float Vector1_2B98EB7D;
            float Vector1_7E1AD4D6;
            float4 Vector4_DA068D89;
            float4 Color_AD16EE5E;
            float4 Color_6D35BD30;
            float Vector1_FEB1FFD5;
            float Vector1_8038C85;
            float Vector1_D2AA808A;
            float Vector1_48A8130;
            float Vector1_9A6C69D3;
            float Vector1_908E92C3;
            float Vector1_EF0B7AAC;
            float Vector1_A409D8BE;
            float Vector1_58F7CCC1;
            float Vector1_3BED982A;
            float Vector1_A6F9214A;
            CBUFFER_END

            struct VertexDescriptionInputs
            {
                float3 ObjectSpaceNormal;
                float3 WorldSpaceNormal;
                float3 ObjectSpacePosition;
                float3 WorldSpacePosition;
                float3 TimeParameters;
            };

            struct SurfaceDescriptionInputs
            {
                float4 ScreenPosition;
            };


            void Unity_Distance_float3(float3 A, float3 B, out float Out)
            {
                Out = distance(A, B);
            }

            void Unity_Divide_float(float A, float B, out float Out)
            {
                Out = A / B;
            }

            void Unity_Power_float(float A, float B, out float Out)
            {
                Out = pow(A, B);
            }

            void Unity_Multiply_float (float3 A, float3 B, out float3 Out)
            {
                Out = A * B;
            }

            void Unity_Rotate_About_Axis_Degrees_float(float3 In, float3 Axis, float Rotation, out float3 Out)
            {
                Rotation = radians(Rotation);

                float s = sin(Rotation);
                float c = cos(Rotation);
                float one_minus_c = 1.0 - c;
                
                Axis = normalize(Axis);

                float3x3 rot_mat = { one_minus_c * Axis.x * Axis.x + c,            one_minus_c * Axis.x * Axis.y - Axis.z * s,     one_minus_c * Axis.z * Axis.x + Axis.y * s,
                                          one_minus_c * Axis.x * Axis.y + Axis.z * s,   one_minus_c * Axis.y * Axis.y + c,              one_minus_c * Axis.y * Axis.z - Axis.x * s,
                                          one_minus_c * Axis.z * Axis.x - Axis.y * s,   one_minus_c * Axis.y * Axis.z + Axis.x * s,     one_minus_c * Axis.z * Axis.z + c
                                        };

                Out = mul(rot_mat,  In);
            }

            void Unity_Multiply_float (float A, float B, out float Out)
            {
                Out = A * B;
            }

            void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
            {
                Out = UV * Tiling + Offset;
            }


        float2 Unity_GradientNoise_Dir_float(float2 p)
        {
            // Permutation and hashing used in webgl-nosie goo.gl/pX7HtC
            p = p % 289;
            float x = (34 * p.x + 1) * p.x % 289 + p.y;
            x = (34 * x + 1) * x % 289;
            x = frac(x / 41) * 2 - 1;
            return normalize(float2(x - floor(x + 0.5), abs(x) - 0.5));
        }

            void Unity_GradientNoise_float(float2 UV, float Scale, out float Out)
            { 
                float2 p = UV * Scale;
                float2 ip = floor(p);
                float2 fp = frac(p);
                float d00 = dot(Unity_GradientNoise_Dir_float(ip), fp);
                float d01 = dot(Unity_GradientNoise_Dir_float(ip + float2(0, 1)), fp - float2(0, 1));
                float d10 = dot(Unity_GradientNoise_Dir_float(ip + float2(1, 0)), fp - float2(1, 0));
                float d11 = dot(Unity_GradientNoise_Dir_float(ip + float2(1, 1)), fp - float2(1, 1));
                fp = fp * fp * fp * (fp * (fp * 6 - 15) + 10);
                Out = lerp(lerp(d00, d01, fp.y), lerp(d10, d11, fp.y), fp.x) + 0.5;
            }

            void Unity_Add_float(float A, float B, out float Out)
            {
                Out = A + B;
            }

            void Unity_Saturate_float(float In, out float Out)
            {
                Out = saturate(In);
            }

            void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
            {
                Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
            }

            void Unity_Absolute_float(float In, out float Out)
            {
                Out = abs(In);
            }

            void Unity_Smoothstep_float(float Edge1, float Edge2, float In, out float Out)
            {
                Out = smoothstep(Edge1, Edge2, In);
            }

            void Unity_Add_float3(float3 A, float3 B, out float3 Out)
            {
                Out = A + B;
            }

            void Unity_SceneDepth_Eye_float(float4 UV, out float Out)
            {
                Out = LinearEyeDepth(SHADERGRAPH_SAMPLE_SCENE_DEPTH(UV.xy), _ZBufferParams);
            }

            void Unity_Subtract_float(float A, float B, out float Out)
            {
                Out = A - B;
            }

            struct VertexDescription
            {
                float3 Position;
            };

            VertexDescription PopulateVertexData(VertexDescriptionInputs IN)
            {
                VertexDescription description = (VertexDescription)0;
                float _Distance_68E28C5B_Out_2;
                Unity_Distance_float3(SHADERGRAPH_OBJECT_POSITION, IN.WorldSpacePosition, _Distance_68E28C5B_Out_2);
                float _Property_3DA35769_Out_0 = Vector1_A409D8BE;
                float _Divide_EB95936B_Out_2;
                Unity_Divide_float(_Distance_68E28C5B_Out_2, _Property_3DA35769_Out_0, _Divide_EB95936B_Out_2);
                float _Power_43005E91_Out_2;
                Unity_Power_float(_Divide_EB95936B_Out_2, 3, _Power_43005E91_Out_2);
                float3 _Multiply_98A26295_Out_2;
                Unity_Multiply_float(IN.WorldSpaceNormal, (_Power_43005E91_Out_2.xxx), _Multiply_98A26295_Out_2);
                float _Property_735AA8B6_Out_0 = Vector1_FEB1FFD5;
                float _Property_9F4CC1F1_Out_0 = Vector1_8038C85;
                float4 _Property_4EA33CC2_Out_0 = Vector4_D3B3E943;
                float _Split_CAEEE4BB_R_1 = _Property_4EA33CC2_Out_0[0];
                float _Split_CAEEE4BB_G_2 = _Property_4EA33CC2_Out_0[1];
                float _Split_CAEEE4BB_B_3 = _Property_4EA33CC2_Out_0[2];
                float _Split_CAEEE4BB_A_4 = _Property_4EA33CC2_Out_0[3];
                float3 _RotateAboutAxis_6FFDD156_Out_3;
                Unity_Rotate_About_Axis_Degrees_float(IN.WorldSpacePosition, (_Property_4EA33CC2_Out_0.xyz), _Split_CAEEE4BB_A_4, _RotateAboutAxis_6FFDD156_Out_3);
                float _Property_F34A3533_Out_0 = Vector1_2B98EB7D;
                float _Multiply_852D3C8E_Out_2;
                Unity_Multiply_float(_Property_F34A3533_Out_0, IN.TimeParameters.x, _Multiply_852D3C8E_Out_2);
                float2 _TilingAndOffset_B9174754_Out_3;
                Unity_TilingAndOffset_float((_RotateAboutAxis_6FFDD156_Out_3.xy), float2 (1, 1), (_Multiply_852D3C8E_Out_2.xx), _TilingAndOffset_B9174754_Out_3);
                float _Property_56518450_Out_0 = Vector1_338070E0;
                float _GradientNoise_40BEF6E1_Out_2;
                Unity_GradientNoise_float(_TilingAndOffset_B9174754_Out_3, _Property_56518450_Out_0, _GradientNoise_40BEF6E1_Out_2);
                float2 _TilingAndOffset_695BCCA6_Out_3;
                Unity_TilingAndOffset_float((_RotateAboutAxis_6FFDD156_Out_3.xy), float2 (1, 1), float2 (0, 0), _TilingAndOffset_695BCCA6_Out_3);
                float _GradientNoise_AD2BA186_Out_2;
                Unity_GradientNoise_float(_TilingAndOffset_695BCCA6_Out_3, _Property_56518450_Out_0, _GradientNoise_AD2BA186_Out_2);
                float _Add_BB4C6F11_Out_2;
                Unity_Add_float(_GradientNoise_40BEF6E1_Out_2, _GradientNoise_AD2BA186_Out_2, _Add_BB4C6F11_Out_2);
                float _Divide_1B4C5A51_Out_2;
                Unity_Divide_float(_Add_BB4C6F11_Out_2, 2, _Divide_1B4C5A51_Out_2);
                float _Saturate_C5D0BE0A_Out_1;
                Unity_Saturate_float(_Divide_1B4C5A51_Out_2, _Saturate_C5D0BE0A_Out_1);
                float _Property_A653A8AC_Out_0 = Vector1_D2AA808A;
                float _Power_838A838_Out_2;
                Unity_Power_float(_Saturate_C5D0BE0A_Out_1, _Property_A653A8AC_Out_0, _Power_838A838_Out_2);
                float4 _Property_963E23E9_Out_0 = Vector4_DA068D89;
                float _Split_30AF1BF4_R_1 = _Property_963E23E9_Out_0[0];
                float _Split_30AF1BF4_G_2 = _Property_963E23E9_Out_0[1];
                float _Split_30AF1BF4_B_3 = _Property_963E23E9_Out_0[2];
                float _Split_30AF1BF4_A_4 = _Property_963E23E9_Out_0[3];
                float2 _Vector2_4B89478C_Out_0 = float2(_Split_30AF1BF4_R_1, _Split_30AF1BF4_G_2);
                float2 _Vector2_491DD62B_Out_0 = float2(_Split_30AF1BF4_B_3, _Split_30AF1BF4_A_4);
                float _Remap_E4CCEAE4_Out_3;
                Unity_Remap_float(_Power_838A838_Out_2, _Vector2_4B89478C_Out_0, _Vector2_491DD62B_Out_0, _Remap_E4CCEAE4_Out_3);
                float _Absolute_8D0D3BAC_Out_1;
                Unity_Absolute_float(_Remap_E4CCEAE4_Out_3, _Absolute_8D0D3BAC_Out_1);
                float _Smoothstep_7A96786D_Out_3;
                Unity_Smoothstep_float(_Property_735AA8B6_Out_0, _Property_9F4CC1F1_Out_0, _Absolute_8D0D3BAC_Out_1, _Smoothstep_7A96786D_Out_3);
                float _Property_AA6E7E52_Out_0 = Vector1_9A6C69D3;
                float _Multiply_8331939D_Out_2;
                Unity_Multiply_float(IN.TimeParameters.x, _Property_AA6E7E52_Out_0, _Multiply_8331939D_Out_2);
                float2 _TilingAndOffset_2DC3C864_Out_3;
                Unity_TilingAndOffset_float((_RotateAboutAxis_6FFDD156_Out_3.xy), float2 (1, 1), (_Multiply_8331939D_Out_2.xx), _TilingAndOffset_2DC3C864_Out_3);
                float _Property_69C7CA9F_Out_0 = Vector1_48A8130;
                float _GradientNoise_1082A80D_Out_2;
                Unity_GradientNoise_float(_TilingAndOffset_2DC3C864_Out_3, _Property_69C7CA9F_Out_0, _GradientNoise_1082A80D_Out_2);
                float _Property_CD233709_Out_0 = Vector1_908E92C3;
                float _Multiply_E32081B6_Out_2;
                Unity_Multiply_float(_GradientNoise_1082A80D_Out_2, _Property_CD233709_Out_0, _Multiply_E32081B6_Out_2);
                float _Add_B6C19B6E_Out_2;
                Unity_Add_float(_Smoothstep_7A96786D_Out_3, _Multiply_E32081B6_Out_2, _Add_B6C19B6E_Out_2);
                float _Add_D4BF8438_Out_2;
                Unity_Add_float(1, _Property_CD233709_Out_0, _Add_D4BF8438_Out_2);
                float _Divide_DC78A4BB_Out_2;
                Unity_Divide_float(_Add_B6C19B6E_Out_2, _Add_D4BF8438_Out_2, _Divide_DC78A4BB_Out_2);
                float3 _Multiply_F2AD6F23_Out_2;
                Unity_Multiply_float(IN.ObjectSpaceNormal, (_Divide_DC78A4BB_Out_2.xxx), _Multiply_F2AD6F23_Out_2);
                float _Property_336E3F53_Out_0 = Vector1_7E1AD4D6;
                float3 _Multiply_FB13E5B_Out_2;
                Unity_Multiply_float(_Multiply_F2AD6F23_Out_2, (_Property_336E3F53_Out_0.xxx), _Multiply_FB13E5B_Out_2);
                float3 _Add_68F9009_Out_2;
                Unity_Add_float3(IN.ObjectSpacePosition, _Multiply_FB13E5B_Out_2, _Add_68F9009_Out_2);
                float3 _Add_AE95D909_Out_2;
                Unity_Add_float3(_Multiply_98A26295_Out_2, _Add_68F9009_Out_2, _Add_AE95D909_Out_2);
                description.Position = _Add_AE95D909_Out_2;
                return description;
            }

            struct SurfaceDescription
            {
                float Alpha;
                float AlphaClipThreshold;
            };

            SurfaceDescription PopulateSurfaceData(SurfaceDescriptionInputs IN)
            {
                SurfaceDescription surface = (SurfaceDescription)0;
                float _SceneDepth_7575CC21_Out_1;
                Unity_SceneDepth_Eye_float(float4(IN.ScreenPosition.xy / IN.ScreenPosition.w, 0, 0), _SceneDepth_7575CC21_Out_1);
                float4 _ScreenPosition_54081CC1_Out_0 = IN.ScreenPosition;
                float _Split_7349907E_R_1 = _ScreenPosition_54081CC1_Out_0[0];
                float _Split_7349907E_G_2 = _ScreenPosition_54081CC1_Out_0[1];
                float _Split_7349907E_B_3 = _ScreenPosition_54081CC1_Out_0[2];
                float _Split_7349907E_A_4 = _ScreenPosition_54081CC1_Out_0[3];
                float _Subtract_1A5C75A2_Out_2;
                Unity_Subtract_float(_Split_7349907E_A_4, 1, _Subtract_1A5C75A2_Out_2);
                float _Subtract_A2E88426_Out_2;
                Unity_Subtract_float(_SceneDepth_7575CC21_Out_1, _Subtract_1A5C75A2_Out_2, _Subtract_A2E88426_Out_2);
                float _Property_FABD1F4F_Out_0 = Vector1_A6F9214A;
                float _Divide_FDCC3C42_Out_2;
                Unity_Divide_float(_Subtract_A2E88426_Out_2, _Property_FABD1F4F_Out_0, _Divide_FDCC3C42_Out_2);
                float _Saturate_58B9B869_Out_1;
                Unity_Saturate_float(_Divide_FDCC3C42_Out_2, _Saturate_58B9B869_Out_1);
                surface.Alpha = _Saturate_58B9B869_Out_1;
                surface.AlphaClipThreshold = 0.5;
                return surface;
            }

            struct GraphVertexInput
            {
                float4 vertex : POSITION;
                float3 normal : NORMAL;
                float4 tangent : TANGENT;
                float4 texcoord1 : TEXCOORD1;
                UNITY_VERTEX_INPUT_INSTANCE_ID
            };


            struct VertexOutput
            {
                float2 uv           : TEXCOORD0;
                float4 clipPos      : SV_POSITION;
                // Interpolators defined by graph
                float3 WorldSpacePosition : TEXCOORD3;
                float3 WorldSpaceNormal : TEXCOORD4;
                float3 WorldSpaceTangent : TEXCOORD5;
                float3 WorldSpaceBiTangent : TEXCOORD6;
                float3 WorldSpaceViewDirection : TEXCOORD7;
                float4 ScreenPosition : TEXCOORD8;
                half4 uv1 : TEXCOORD9;

                UNITY_VERTEX_INPUT_INSTANCE_ID
                UNITY_VERTEX_OUTPUT_STEREO
            };

            float3 _LightDirection;

            VertexOutput ShadowPassVertex(GraphVertexInput v)
            {
                VertexOutput o;
                UNITY_SETUP_INSTANCE_ID(v);
                UNITY_TRANSFER_INSTANCE_ID(v, o);
                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

                // Vertex transformations performed by graph
                float3 WorldSpacePosition = mul(UNITY_MATRIX_M,v.vertex).xyz;
                float3 WorldSpaceNormal = normalize(mul(v.normal,(float3x3)UNITY_MATRIX_I_M));
                float3 WorldSpaceTangent = normalize(mul((float3x3)UNITY_MATRIX_M,v.tangent.xyz));
                float3 WorldSpaceBiTangent = cross(WorldSpaceNormal, WorldSpaceTangent.xyz) * v.tangent.w;
                float3 WorldSpaceViewDirection = _WorldSpaceCameraPos.xyz - mul(GetObjectToWorldMatrix(), float4(v.vertex.xyz, 1.0)).xyz;
                float4 ScreenPosition = ComputeScreenPos(mul(GetWorldToHClipMatrix(), mul(GetObjectToWorldMatrix(), v.vertex)), _ProjectionParams.x);
                float4 uv1 = v.texcoord1;
                float3 ObjectSpaceNormal = mul(WorldSpaceNormal,(float3x3)UNITY_MATRIX_M).xyz;
                float3 ObjectSpacePosition = mul(UNITY_MATRIX_I_M,float4(WorldSpacePosition,1.0)).xyz;

                VertexDescriptionInputs vdi = (VertexDescriptionInputs)0;

                // Vertex description inputs defined by graph
                vdi.ObjectSpaceNormal = ObjectSpaceNormal;
                vdi.WorldSpaceNormal = WorldSpaceNormal;
                vdi.ObjectSpacePosition = ObjectSpacePosition;
                vdi.WorldSpacePosition = WorldSpacePosition;
                vdi.TimeParameters = _TimeParameters.xyz;

                VertexDescription vd = PopulateVertexData(vdi);
                v.vertex.xyz = vd.Position;

                // Vertex shader outputs defined by graph
                o.WorldSpacePosition = WorldSpacePosition;
                o.WorldSpaceNormal = WorldSpaceNormal;
                o.WorldSpaceTangent = WorldSpaceTangent;
                o.WorldSpaceBiTangent = WorldSpaceBiTangent;
                o.WorldSpaceViewDirection = WorldSpaceViewDirection;
                o.ScreenPosition = ScreenPosition;
                o.uv1 = uv1;

                
                float3 positionWS = TransformObjectToWorld(v.vertex.xyz);
                float3 normalWS = TransformObjectToWorldNormal(v.normal);

                float4 clipPos = TransformWorldToHClip(ApplyShadowBias(positionWS, normalWS, _LightDirection));

            #if UNITY_REVERSED_Z
                clipPos.z = min(clipPos.z, clipPos.w * UNITY_NEAR_CLIP_VALUE);
            #else
                clipPos.z = max(clipPos.z, clipPos.w * UNITY_NEAR_CLIP_VALUE);
            #endif
                o.clipPos = clipPos;

                return o;
            }

            half4 ShadowPassFragment(VertexOutput IN ) : SV_TARGET
            {
                UNITY_SETUP_INSTANCE_ID(IN);
        		UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);

                // Pixel transformations performed by graph
                float3 WorldSpacePosition = IN.WorldSpacePosition;
                float3 WorldSpaceNormal = IN.WorldSpaceNormal;
                float3 WorldSpaceTangent = IN.WorldSpaceTangent;
                float3 WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
                float3 WorldSpaceViewDirection = IN.WorldSpaceViewDirection;
                float4 ScreenPosition = IN.ScreenPosition;
                float4 uv1 = IN.uv1;

                SurfaceDescriptionInputs surfaceInput = (SurfaceDescriptionInputs)0;

        		// Surface description inputs defined by graph
                surfaceInput.ScreenPosition = ScreenPosition;

                SurfaceDescription surf = PopulateSurfaceData(surfaceInput);

        		float Alpha = 1;
        		float AlphaClipThreshold = 0;

        		// Surface description remap performed by graph
                Alpha = surf.Alpha;
                AlphaClipThreshold = surf.AlphaClipThreshold;

         #if _AlphaClip
        		clip(Alpha - AlphaClipThreshold);
        #endif
                return 0;
            }

            ENDHLSL
        }

        Pass
        {
            Name "DepthOnly"
            Tags{"LightMode" = "DepthOnly"}

            ZWrite On
            ColorMask 0

            // Material options generated by graph
            Cull Off

            HLSLPROGRAM
            // Required to compile gles 2.0 with standard srp library
            #pragma prefer_hlslcc gles
            #pragma exclude_renderers d3d11_9x
            #pragma target 2.0

            //--------------------------------------
            // GPU Instancing
            #pragma multi_compile_instancing

            #pragma vertex vert
            #pragma fragment frag

            // Defines generated by graph
            #define REQUIRE_DEPTH_TEXTURE

            #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
            #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Lighting.hlsl"
            #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/ShaderGraphFunctions.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"

            CBUFFER_START(UnityPerMaterial)
            float4 Vector4_D3B3E943;
            float Vector1_338070E0;
            float Vector1_2B98EB7D;
            float Vector1_7E1AD4D6;
            float4 Vector4_DA068D89;
            float4 Color_AD16EE5E;
            float4 Color_6D35BD30;
            float Vector1_FEB1FFD5;
            float Vector1_8038C85;
            float Vector1_D2AA808A;
            float Vector1_48A8130;
            float Vector1_9A6C69D3;
            float Vector1_908E92C3;
            float Vector1_EF0B7AAC;
            float Vector1_A409D8BE;
            float Vector1_58F7CCC1;
            float Vector1_3BED982A;
            float Vector1_A6F9214A;
            CBUFFER_END

            struct VertexDescriptionInputs
            {
                float3 ObjectSpaceNormal;
                float3 WorldSpaceNormal;
                float3 ObjectSpacePosition;
                float3 WorldSpacePosition;
                float3 TimeParameters;
            };

            struct SurfaceDescriptionInputs
            {
                float4 ScreenPosition;
            };


            void Unity_Distance_float3(float3 A, float3 B, out float Out)
            {
                Out = distance(A, B);
            }

            void Unity_Divide_float(float A, float B, out float Out)
            {
                Out = A / B;
            }

            void Unity_Power_float(float A, float B, out float Out)
            {
                Out = pow(A, B);
            }

            void Unity_Multiply_float (float3 A, float3 B, out float3 Out)
            {
                Out = A * B;
            }

            void Unity_Rotate_About_Axis_Degrees_float(float3 In, float3 Axis, float Rotation, out float3 Out)
            {
                Rotation = radians(Rotation);

                float s = sin(Rotation);
                float c = cos(Rotation);
                float one_minus_c = 1.0 - c;
                
                Axis = normalize(Axis);

                float3x3 rot_mat = { one_minus_c * Axis.x * Axis.x + c,            one_minus_c * Axis.x * Axis.y - Axis.z * s,     one_minus_c * Axis.z * Axis.x + Axis.y * s,
                                          one_minus_c * Axis.x * Axis.y + Axis.z * s,   one_minus_c * Axis.y * Axis.y + c,              one_minus_c * Axis.y * Axis.z - Axis.x * s,
                                          one_minus_c * Axis.z * Axis.x - Axis.y * s,   one_minus_c * Axis.y * Axis.z + Axis.x * s,     one_minus_c * Axis.z * Axis.z + c
                                        };

                Out = mul(rot_mat,  In);
            }

            void Unity_Multiply_float (float A, float B, out float Out)
            {
                Out = A * B;
            }

            void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
            {
                Out = UV * Tiling + Offset;
            }


        float2 Unity_GradientNoise_Dir_float(float2 p)
        {
            // Permutation and hashing used in webgl-nosie goo.gl/pX7HtC
            p = p % 289;
            float x = (34 * p.x + 1) * p.x % 289 + p.y;
            x = (34 * x + 1) * x % 289;
            x = frac(x / 41) * 2 - 1;
            return normalize(float2(x - floor(x + 0.5), abs(x) - 0.5));
        }

            void Unity_GradientNoise_float(float2 UV, float Scale, out float Out)
            { 
                float2 p = UV * Scale;
                float2 ip = floor(p);
                float2 fp = frac(p);
                float d00 = dot(Unity_GradientNoise_Dir_float(ip), fp);
                float d01 = dot(Unity_GradientNoise_Dir_float(ip + float2(0, 1)), fp - float2(0, 1));
                float d10 = dot(Unity_GradientNoise_Dir_float(ip + float2(1, 0)), fp - float2(1, 0));
                float d11 = dot(Unity_GradientNoise_Dir_float(ip + float2(1, 1)), fp - float2(1, 1));
                fp = fp * fp * fp * (fp * (fp * 6 - 15) + 10);
                Out = lerp(lerp(d00, d01, fp.y), lerp(d10, d11, fp.y), fp.x) + 0.5;
            }

            void Unity_Add_float(float A, float B, out float Out)
            {
                Out = A + B;
            }

            void Unity_Saturate_float(float In, out float Out)
            {
                Out = saturate(In);
            }

            void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
            {
                Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
            }

            void Unity_Absolute_float(float In, out float Out)
            {
                Out = abs(In);
            }

            void Unity_Smoothstep_float(float Edge1, float Edge2, float In, out float Out)
            {
                Out = smoothstep(Edge1, Edge2, In);
            }

            void Unity_Add_float3(float3 A, float3 B, out float3 Out)
            {
                Out = A + B;
            }

            void Unity_SceneDepth_Eye_float(float4 UV, out float Out)
            {
                Out = LinearEyeDepth(SHADERGRAPH_SAMPLE_SCENE_DEPTH(UV.xy), _ZBufferParams);
            }

            void Unity_Subtract_float(float A, float B, out float Out)
            {
                Out = A - B;
            }

            struct VertexDescription
            {
                float3 Position;
            };

            VertexDescription PopulateVertexData(VertexDescriptionInputs IN)
            {
                VertexDescription description = (VertexDescription)0;
                float _Distance_68E28C5B_Out_2;
                Unity_Distance_float3(SHADERGRAPH_OBJECT_POSITION, IN.WorldSpacePosition, _Distance_68E28C5B_Out_2);
                float _Property_3DA35769_Out_0 = Vector1_A409D8BE;
                float _Divide_EB95936B_Out_2;
                Unity_Divide_float(_Distance_68E28C5B_Out_2, _Property_3DA35769_Out_0, _Divide_EB95936B_Out_2);
                float _Power_43005E91_Out_2;
                Unity_Power_float(_Divide_EB95936B_Out_2, 3, _Power_43005E91_Out_2);
                float3 _Multiply_98A26295_Out_2;
                Unity_Multiply_float(IN.WorldSpaceNormal, (_Power_43005E91_Out_2.xxx), _Multiply_98A26295_Out_2);
                float _Property_735AA8B6_Out_0 = Vector1_FEB1FFD5;
                float _Property_9F4CC1F1_Out_0 = Vector1_8038C85;
                float4 _Property_4EA33CC2_Out_0 = Vector4_D3B3E943;
                float _Split_CAEEE4BB_R_1 = _Property_4EA33CC2_Out_0[0];
                float _Split_CAEEE4BB_G_2 = _Property_4EA33CC2_Out_0[1];
                float _Split_CAEEE4BB_B_3 = _Property_4EA33CC2_Out_0[2];
                float _Split_CAEEE4BB_A_4 = _Property_4EA33CC2_Out_0[3];
                float3 _RotateAboutAxis_6FFDD156_Out_3;
                Unity_Rotate_About_Axis_Degrees_float(IN.WorldSpacePosition, (_Property_4EA33CC2_Out_0.xyz), _Split_CAEEE4BB_A_4, _RotateAboutAxis_6FFDD156_Out_3);
                float _Property_F34A3533_Out_0 = Vector1_2B98EB7D;
                float _Multiply_852D3C8E_Out_2;
                Unity_Multiply_float(_Property_F34A3533_Out_0, IN.TimeParameters.x, _Multiply_852D3C8E_Out_2);
                float2 _TilingAndOffset_B9174754_Out_3;
                Unity_TilingAndOffset_float((_RotateAboutAxis_6FFDD156_Out_3.xy), float2 (1, 1), (_Multiply_852D3C8E_Out_2.xx), _TilingAndOffset_B9174754_Out_3);
                float _Property_56518450_Out_0 = Vector1_338070E0;
                float _GradientNoise_40BEF6E1_Out_2;
                Unity_GradientNoise_float(_TilingAndOffset_B9174754_Out_3, _Property_56518450_Out_0, _GradientNoise_40BEF6E1_Out_2);
                float2 _TilingAndOffset_695BCCA6_Out_3;
                Unity_TilingAndOffset_float((_RotateAboutAxis_6FFDD156_Out_3.xy), float2 (1, 1), float2 (0, 0), _TilingAndOffset_695BCCA6_Out_3);
                float _GradientNoise_AD2BA186_Out_2;
                Unity_GradientNoise_float(_TilingAndOffset_695BCCA6_Out_3, _Property_56518450_Out_0, _GradientNoise_AD2BA186_Out_2);
                float _Add_BB4C6F11_Out_2;
                Unity_Add_float(_GradientNoise_40BEF6E1_Out_2, _GradientNoise_AD2BA186_Out_2, _Add_BB4C6F11_Out_2);
                float _Divide_1B4C5A51_Out_2;
                Unity_Divide_float(_Add_BB4C6F11_Out_2, 2, _Divide_1B4C5A51_Out_2);
                float _Saturate_C5D0BE0A_Out_1;
                Unity_Saturate_float(_Divide_1B4C5A51_Out_2, _Saturate_C5D0BE0A_Out_1);
                float _Property_A653A8AC_Out_0 = Vector1_D2AA808A;
                float _Power_838A838_Out_2;
                Unity_Power_float(_Saturate_C5D0BE0A_Out_1, _Property_A653A8AC_Out_0, _Power_838A838_Out_2);
                float4 _Property_963E23E9_Out_0 = Vector4_DA068D89;
                float _Split_30AF1BF4_R_1 = _Property_963E23E9_Out_0[0];
                float _Split_30AF1BF4_G_2 = _Property_963E23E9_Out_0[1];
                float _Split_30AF1BF4_B_3 = _Property_963E23E9_Out_0[2];
                float _Split_30AF1BF4_A_4 = _Property_963E23E9_Out_0[3];
                float2 _Vector2_4B89478C_Out_0 = float2(_Split_30AF1BF4_R_1, _Split_30AF1BF4_G_2);
                float2 _Vector2_491DD62B_Out_0 = float2(_Split_30AF1BF4_B_3, _Split_30AF1BF4_A_4);
                float _Remap_E4CCEAE4_Out_3;
                Unity_Remap_float(_Power_838A838_Out_2, _Vector2_4B89478C_Out_0, _Vector2_491DD62B_Out_0, _Remap_E4CCEAE4_Out_3);
                float _Absolute_8D0D3BAC_Out_1;
                Unity_Absolute_float(_Remap_E4CCEAE4_Out_3, _Absolute_8D0D3BAC_Out_1);
                float _Smoothstep_7A96786D_Out_3;
                Unity_Smoothstep_float(_Property_735AA8B6_Out_0, _Property_9F4CC1F1_Out_0, _Absolute_8D0D3BAC_Out_1, _Smoothstep_7A96786D_Out_3);
                float _Property_AA6E7E52_Out_0 = Vector1_9A6C69D3;
                float _Multiply_8331939D_Out_2;
                Unity_Multiply_float(IN.TimeParameters.x, _Property_AA6E7E52_Out_0, _Multiply_8331939D_Out_2);
                float2 _TilingAndOffset_2DC3C864_Out_3;
                Unity_TilingAndOffset_float((_RotateAboutAxis_6FFDD156_Out_3.xy), float2 (1, 1), (_Multiply_8331939D_Out_2.xx), _TilingAndOffset_2DC3C864_Out_3);
                float _Property_69C7CA9F_Out_0 = Vector1_48A8130;
                float _GradientNoise_1082A80D_Out_2;
                Unity_GradientNoise_float(_TilingAndOffset_2DC3C864_Out_3, _Property_69C7CA9F_Out_0, _GradientNoise_1082A80D_Out_2);
                float _Property_CD233709_Out_0 = Vector1_908E92C3;
                float _Multiply_E32081B6_Out_2;
                Unity_Multiply_float(_GradientNoise_1082A80D_Out_2, _Property_CD233709_Out_0, _Multiply_E32081B6_Out_2);
                float _Add_B6C19B6E_Out_2;
                Unity_Add_float(_Smoothstep_7A96786D_Out_3, _Multiply_E32081B6_Out_2, _Add_B6C19B6E_Out_2);
                float _Add_D4BF8438_Out_2;
                Unity_Add_float(1, _Property_CD233709_Out_0, _Add_D4BF8438_Out_2);
                float _Divide_DC78A4BB_Out_2;
                Unity_Divide_float(_Add_B6C19B6E_Out_2, _Add_D4BF8438_Out_2, _Divide_DC78A4BB_Out_2);
                float3 _Multiply_F2AD6F23_Out_2;
                Unity_Multiply_float(IN.ObjectSpaceNormal, (_Divide_DC78A4BB_Out_2.xxx), _Multiply_F2AD6F23_Out_2);
                float _Property_336E3F53_Out_0 = Vector1_7E1AD4D6;
                float3 _Multiply_FB13E5B_Out_2;
                Unity_Multiply_float(_Multiply_F2AD6F23_Out_2, (_Property_336E3F53_Out_0.xxx), _Multiply_FB13E5B_Out_2);
                float3 _Add_68F9009_Out_2;
                Unity_Add_float3(IN.ObjectSpacePosition, _Multiply_FB13E5B_Out_2, _Add_68F9009_Out_2);
                float3 _Add_AE95D909_Out_2;
                Unity_Add_float3(_Multiply_98A26295_Out_2, _Add_68F9009_Out_2, _Add_AE95D909_Out_2);
                description.Position = _Add_AE95D909_Out_2;
                return description;
            }

            struct SurfaceDescription
            {
                float Alpha;
                float AlphaClipThreshold;
            };

            SurfaceDescription PopulateSurfaceData(SurfaceDescriptionInputs IN)
            {
                SurfaceDescription surface = (SurfaceDescription)0;
                float _SceneDepth_7575CC21_Out_1;
                Unity_SceneDepth_Eye_float(float4(IN.ScreenPosition.xy / IN.ScreenPosition.w, 0, 0), _SceneDepth_7575CC21_Out_1);
                float4 _ScreenPosition_54081CC1_Out_0 = IN.ScreenPosition;
                float _Split_7349907E_R_1 = _ScreenPosition_54081CC1_Out_0[0];
                float _Split_7349907E_G_2 = _ScreenPosition_54081CC1_Out_0[1];
                float _Split_7349907E_B_3 = _ScreenPosition_54081CC1_Out_0[2];
                float _Split_7349907E_A_4 = _ScreenPosition_54081CC1_Out_0[3];
                float _Subtract_1A5C75A2_Out_2;
                Unity_Subtract_float(_Split_7349907E_A_4, 1, _Subtract_1A5C75A2_Out_2);
                float _Subtract_A2E88426_Out_2;
                Unity_Subtract_float(_SceneDepth_7575CC21_Out_1, _Subtract_1A5C75A2_Out_2, _Subtract_A2E88426_Out_2);
                float _Property_FABD1F4F_Out_0 = Vector1_A6F9214A;
                float _Divide_FDCC3C42_Out_2;
                Unity_Divide_float(_Subtract_A2E88426_Out_2, _Property_FABD1F4F_Out_0, _Divide_FDCC3C42_Out_2);
                float _Saturate_58B9B869_Out_1;
                Unity_Saturate_float(_Divide_FDCC3C42_Out_2, _Saturate_58B9B869_Out_1);
                surface.Alpha = _Saturate_58B9B869_Out_1;
                surface.AlphaClipThreshold = 0.5;
                return surface;
            }

            struct GraphVertexInput
            {
                float4 vertex : POSITION;
                float3 normal : NORMAL;
                float4 tangent : TANGENT;
                float4 texcoord1 : TEXCOORD1;
                UNITY_VERTEX_INPUT_INSTANCE_ID
            };


            struct VertexOutput
            {
                float2 uv           : TEXCOORD0;
                float4 clipPos      : SV_POSITION;
                // Interpolators defined by graph
                float3 WorldSpacePosition : TEXCOORD3;
                float3 WorldSpaceNormal : TEXCOORD4;
                float3 WorldSpaceTangent : TEXCOORD5;
                float3 WorldSpaceBiTangent : TEXCOORD6;
                float3 WorldSpaceViewDirection : TEXCOORD7;
                float4 ScreenPosition : TEXCOORD8;
                half4 uv1 : TEXCOORD9;

                UNITY_VERTEX_INPUT_INSTANCE_ID
                UNITY_VERTEX_OUTPUT_STEREO
            };

            VertexOutput vert(GraphVertexInput v)
            {
                VertexOutput o = (VertexOutput)0;
                UNITY_SETUP_INSTANCE_ID(v);
                UNITY_TRANSFER_INSTANCE_ID(v, o);
                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

                // Vertex transformations performed by graph
                float3 WorldSpacePosition = mul(UNITY_MATRIX_M,v.vertex).xyz;
                float3 WorldSpaceNormal = normalize(mul(v.normal,(float3x3)UNITY_MATRIX_I_M));
                float3 WorldSpaceTangent = normalize(mul((float3x3)UNITY_MATRIX_M,v.tangent.xyz));
                float3 WorldSpaceBiTangent = cross(WorldSpaceNormal, WorldSpaceTangent.xyz) * v.tangent.w;
                float3 WorldSpaceViewDirection = _WorldSpaceCameraPos.xyz - mul(GetObjectToWorldMatrix(), float4(v.vertex.xyz, 1.0)).xyz;
                float4 ScreenPosition = ComputeScreenPos(mul(GetWorldToHClipMatrix(), mul(GetObjectToWorldMatrix(), v.vertex)), _ProjectionParams.x);
                float4 uv1 = v.texcoord1;
                float3 ObjectSpaceNormal = mul(WorldSpaceNormal,(float3x3)UNITY_MATRIX_M).xyz;
                float3 ObjectSpacePosition = mul(UNITY_MATRIX_I_M,float4(WorldSpacePosition,1.0)).xyz;

                VertexDescriptionInputs vdi = (VertexDescriptionInputs)0;

                // Vertex description inputs defined by graph
                vdi.ObjectSpaceNormal = ObjectSpaceNormal;
                vdi.WorldSpaceNormal = WorldSpaceNormal;
                vdi.ObjectSpacePosition = ObjectSpacePosition;
                vdi.WorldSpacePosition = WorldSpacePosition;
                vdi.TimeParameters = _TimeParameters.xyz;

                VertexDescription vd = PopulateVertexData(vdi);
                v.vertex.xyz = vd.Position;

                // Vertex shader outputs defined by graph
                o.WorldSpacePosition = WorldSpacePosition;
                o.WorldSpaceNormal = WorldSpaceNormal;
                o.WorldSpaceTangent = WorldSpaceTangent;
                o.WorldSpaceBiTangent = WorldSpaceBiTangent;
                o.WorldSpaceViewDirection = WorldSpaceViewDirection;
                o.ScreenPosition = ScreenPosition;
                o.uv1 = uv1;

                o.clipPos = TransformObjectToHClip(v.vertex.xyz);
                return o;
            }

            half4 frag(VertexOutput IN ) : SV_TARGET
            {
                UNITY_SETUP_INSTANCE_ID(IN);
        		UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);

                // Pixel transformations performed by graph
                float3 WorldSpacePosition = IN.WorldSpacePosition;
                float3 WorldSpaceNormal = IN.WorldSpaceNormal;
                float3 WorldSpaceTangent = IN.WorldSpaceTangent;
                float3 WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
                float3 WorldSpaceViewDirection = IN.WorldSpaceViewDirection;
                float4 ScreenPosition = IN.ScreenPosition;
                float4 uv1 = IN.uv1;

                SurfaceDescriptionInputs surfaceInput = (SurfaceDescriptionInputs)0;

        		// Surface description inputs defined by graph
                surfaceInput.ScreenPosition = ScreenPosition;

                SurfaceDescription surf = PopulateSurfaceData(surfaceInput);

        		float Alpha = 1;
        		float AlphaClipThreshold = 0;

        		// Surface description remap performed by graph
                Alpha = surf.Alpha;
                AlphaClipThreshold = surf.AlphaClipThreshold;

         #if _AlphaClip
        		clip(Alpha - AlphaClipThreshold);
        #endif
                return 0;
            }
            ENDHLSL
        }
    }
    FallBack "Hidden/InternalErrorShader"
}
